{
  "course": "DSM100-2022-OCT",
  "topic": "Topic 2: Problem solving agents",
  "title": "Lecture 3: Informed search",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96129&forceview=1",
  "transcript": "[music]In the previous mini-lecture, we talked about limitations of blind search strategies. They require exponential time and considerable spaceto complete the search. In this mini-lecture,we will talk about how problem-specific knowledge,knowledge beyond the problem definition itself can help in finding solution more efficiently. Such search strategies are called informedor heuristic searches.Problem-specific knowledge can be expressed in different ways.It can be expressed as an evaluation function or it can be expressed as a heuristic function,as a component of the evaluation function.The main strategy for informed searchis the best-first search strategy where a node is selected for expansion based on an evaluation functionas it is likely quickly lead to a solution.The figure on this slide shows a search treeand the path to the goal state is highlighted in red.A good evaluation or heuristic function would direct this search to this path instead of systematically checking all possible optionsfollowing breadths first or depths first strategies.The 8 puzzle is a classic example of heuristic search problem.The figure on the left shows an initial state,and on the right, the target state. The average solution has 22 steps.A blind search will systematically check all possible movements until it finds a solution.An informed search can be directed by heuristic.We can introduce various heuristic functions.For example, h1 is the number of misplaced tiles.All of the 8 tiles are in the wrong place,so the start state has h1=8. We can introduce a different heuristics. h2 is the sum of the distances of the tilesfrom their goal positions.For example, to get the tile 1 to the goal position,three moves are required.To put tile 2 to the goal position,two moves are required, and so on.The table on this slide shows a comparison of the search costfor the blind iterative deepening search and two heuristic searches using h1 and h2. The data are averaged over 100 instances of rounds of respective algorithms.As you can see, the use of heuristicssubstantially reduced the number of generated nodesin the search trees. For example for the search depth of six, 680 nodes were generated by iterative deepening search, while using h1 reduced it to 20, and using h2 to 18.The deeper search, the more beneficial heuristics are.You also can see that heuristic h2 is better than h1.How one can find heuristic functions?Heuristic functions can be generatedbased on simplified, or so-called relaxed problems. They also can be learned from experience. If an agent solved many 8-puzzles and remember solutions,each example would include the initial stateand the cost of the solution.[?] an agent can learn to predict the cost of solutionfor a new initial state and use it as a heuristic function.Features of the search space can be used as heuristics too.In the considered examples, the number of misplaced tiles is helpful in predicting the solution cost.For example, an agent may learnthat if the number of misplaced tiles is five, then the cost of solution is usually 14, and so on.Thus, knowledge about the number of misplaced tiles is helpful.One of the best-known heuristics search is the A* search.It evaluates nodes by the evaluation function that includes the cost of reaching a node and heuristic.An evaluation function is the estimate of the cheapest solution through a node. A* search has nice properties and it can be complete and optimal under certain conditions. One of disadvantages of this approach is high demand for memory. Memory-bound heuristic searchesare designed to overcome the limitations of the A* search.Iterative-deepening A* algorithms uses an evaluation function to determine a cut-offwhen to consider that the node should not be expanded further.Recursive best-first search is similar to recursive depth-first searchbut uses an evaluation function to limit the depth of search.Memory-bounded A* and its simplified version, SMA*, are improved versions of A* search which are used in memory more efficiently. To save the memory based on the evaluation function,they can drop worst leaf nodes and keep only the best ones. In this mini-lecture, we discussed informed search strategies, how to use problem-specific knowledge to find a goal quicker.Heuristic search algorithms are widely used in many applications,but their performance depends on the quality of the heuristic function.Heuristic function can belong from experience or generated from relaxed problems."
}