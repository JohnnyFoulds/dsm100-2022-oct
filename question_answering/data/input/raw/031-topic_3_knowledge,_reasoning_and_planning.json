{
  "course": "DSM100-2022-OCT",
  "topic": "Topic 3: Knowledge, reasoning and planning",
  "title": "Lecture 7: Planning",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96184&forceview=1",
  "transcript": "[MUSIC]Planning.Devising a plan of actions to achieve one's goalis a critical part of AI.It is at the core of such applications as manufacturing and robotics.In this mini-lecture,we will consider classical planningand also planning in the real worldwhere the situation can change unpredictably.We will consider planning in multi-agent environmentand also scheduling.As we discussed previously,a problem-solving agent has to find a sequence of actionsthat result in a goal state.The focus in this lesson is on that sequence of actions,its representation,implementation,and communication to other agents, if necessary.The importance of planningis reflected in the fact that there are dedicated languageslike PDDL, Planning Domain Definition Languageand has numerous variants and also standards.For example, I was involved with the development of robotic task ontologythat standardizes the representation and communicationof typical tasksor problems in the terminology of problem-solving agents.There are also standards for defining actions and their properties.Classical planning deals with observable, deterministic situations.We can represent a planning task as a search problem.Given an initial state,a list of possible actions and their results,find a sequence of actions that leads to the goal state.We can use for planning all the algorithms we have previously consideredfor solving problems,breadth-first, depth-first, heuristic search, and so on.It is also possible to apply deductive reasoningand search reasoning agents as Prolog to find solutions.Thus, for planning task, we need to represent statesincluding an initial and goal states and actions.Typically, actions are described following a formal schemathat defines its parameters,preconditions, and its effects.For example, the schema for flying a plane may look like this,action, fly (p, from, to),precondition, at (p, from)and plane (p) airport (from) airport (to),effect, not at (p, from) and at (p, to).An action is applicable in a stateas if the preconditions are satisfied.One of the most famous planning examples is the blocks world.Its domain consists of a set of cube-shaped blocks sitting on a table.The blocks can be stackedbut only one block can fit directly on top of another.A robot arm can pick up a block and move it to another position,either on the table or on top of another block.The arm can pick up only one block at a time,so it can't pick up a block that has another on it.The goal is to find a sequence of actionsthat achieves the goal state,for example, a on b, and b on c.Let us represent this example using Prolog notation.There are two situations in the blocks worldthat can be represented by predicates or relations,on (Block, Object)and clear (Object),where object is a block or a space on the table.Object (X)implies place (X) or block (X).The example shown on this slide has three blocks, a, b, c,and four places, 1, 2, 3, 4.We can represent the initial state as the list,clear (2), clear (4), clear (b), clear (c),on (a,1), on (b,3), on (c,a).Actions.For this simple example, there is only one action,move (Block, From, To).Preconditions can be defined by the procedure can(Action and Precondition).In Prolog, it will look like this.Can, action movewith parameters (Block, From, To)and precondition as a list that block has to be clear,the place where it's moving clear,and what it's going to do.Effects can be definedas a list of relationships that action establishes.They become true after the action is executed.Classical planning problems are NP-hard or worse.Optimal planning is often not possible.However, sub-optimal planning is more achievable.As discussed before,finding good solutions requires good heuristics.A heuristic function can be determined by considering a relaxed problemthat is easier to solve.One of approaches for relaxing the problem is decomposition,dividing a problem into parts, solving each part independently,and then combining the solutions.The independent assumption is not always justified,but in many complex situations, it is the best approach.Planning in the real world is different from classical planning.An agent may need to act in a partially observable,nondeterministic, or unknown environment.In classic planning,the planning is done on this so-called closed-world assumption.It assumes that if something is not explicitly defined,then it doesn't exist.Agents acting in the real worldhave to act on this open-world assumption.If something is not defined in their knowledge base,it means unknown.A partially observable and non-deterministic environment,agents have to produce alternative planswith conditional branches, they're called contingent planning.In dynamic environments,agents need to continuously monitor the situationand do replanning if necessary.There can be changes in the goal.Actions may have unexpected results, and the states can change.Classical planning representationfocuses on what to do and in what order.It doesn't take into account how long and when.The real world poses resource constraints,for example, an airline has a limited number of staff.Planning problems that include temporal and resource constraintsare known as scheduling problems.A typical approach is \"plan first, schedule later,\"separating these problems.Time and resources also require representation.Resources can be reusable like stock and consumable like chemicals.Planning problems are usually NP hardand scheduling problems taking into account all the constraintsare even harder to solve.One of the approaches to reducing the complexity of planningand scheduling problemsis hierarchical task networks or HTN planning.Actions can be generalized or abstractedinto several levels of abstractionto the level where it is easier to do high-level planning,for example, to drive from town A to town B.Then such an action can be refined to the operational levellike to the left, right, and [?]Humans are good in high level planningand then the refinement and implementation of such planscan be done automatically.Multi-agent planning is even more complexthan planning for a single agent.An extra layer of planning and schedulingmay require to coordinate agents' actions.Such planning may need to generate plansfor joint actions or joint plans.Agents may share the same goal and the same representationsor they may not.The agents may cooperate in achieving the same goalor they may compete.Communication between agents may require or may not.In this mini-lecture, we looked at planning and scheduling.We discussed the complexity of classical planningand approaches for finding good solutions,for example, using hierarchical planning.We briefly considered non-deterministic and partially observable environmentswhere agents need to produce contingency plans.We also talked about planning for multi-agent environments."
}