{
  "course": "DSM100-2022-OCT",
  "topic": "Topics 5&6: Creatures",
  "title": "Lecture: Generating a random population",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96313&forceview=1",
  "transcript": "In this video, I'm going to be implementing the population class.In summary, what I'm going to do is create a new module, then I'm going to use the creature class inside that module to create a list of creatures and then we're going to be done.Okay, let's jump straight over to the code editor so we can see what we're going to do.The first thing we're going to do is create a test population file, because we're going to do test driven development as usual.I'm going to create a new file.I'm going to save it as test_population.py, and I'm just going to quickly write the boiler plate code for doing some basic unit tests so I do import unit test and I'm going to create a class called TestPop, which is going to extend or inherit from unittest.TestCase and then I'm going to write my first test function, which is going to call testPopExists.It's going to say, well, let's import the population module, which we haven't written yet and then we're going to assume that we can do population.Population to instantiate a new population and it's going to receive two arguments, which are going to be the population size and the gene count, which in this case are going to be, 10 and 4.Okay. Then I do some assertions of IsNotNone pop.Then finally, I just need to write the code to actually execute the unit test so I do unittest.main.Let's run that and see what happens.Okay. It fails. We knew it was going to fail.It's failing on the fact that there is no module named population yet because I haven't created it.So let's create it.Another new file.This one's going to be called population.py.I'm going to write the minimum code to pass the test, which is to implement a class called population, and population is going to have a constructor, which is going to take the instance of the object as its first argument, of course, and then it's going to have a pop size and a gene count parameter.It's for now, just going to do pass because that's all we need to pass the test and then I go over here and I run the test again.Now you can see it's running one test and passing it, so that's good.I've got my basic population class mapped out.The next step is to maybe verify that it's actually got some individuals in it, so we can do def testPopHasIndis self,and I'm going to do the same line there, but this time I'm going to assert that the number of individualsin the population is 10, which is what I've asked for, so I'm going to do self assert equal the length of pop.creatures call it actually creatures and 10.Right? See there.Basically, I'm just going to checkthat the length of the population creatures list, which is going to be inside the population, is 10.Remember, the concept of test driven development is we are writing the specification, we're writing active specification, which we can actually use to evaluate our code, which is what makes it really powerful.I'm saying I need this function to have updated the creature object, sorry, the population object so it has some creatures in it.Of course, that's going to fail because it doesn't yet.It just does pass.Population has no attribute creatures.We know that because we haven't added it, so let's go back over to our population.Now we're going to do something like this, so we're going to do import creature.What I want to do is say self--well, now we're going to create a list of random creatures.Self.creatures equals, we can do it like this.We can do the list comprehension so we can do creature.creature.Let's just check the parameters on creature there.Okay.The base glass, gene count, it just takes a gene count.Gene count equals, and we just do gene count like that, so that for i in range, pop size.Okay.I've just done a list comprehension.Let me just zoom out a bit so you can see that and get out of the way.That's my list comprehension there.It's a bit of a trick.With the list comprehension, you assume that the first thing in the list comprehensionis going to be the thing that you're going to be-- that's going to come from the iteration, but mine doesn't.I'm just actually just calling the creature constructor here.Look, I'm just calling this creature constructor as the first thing in my list comprehension, therefore I get a list of creatures basically, which is pretty neat.Then the number of times that the iteration runs is i in pop size, so it's up to 10 and that means I get a list of 10 creatures, which is pretty nifty.I'm storing it onto selft.creatures.I can now remove that because I'm doing something and that hopefully will pass the test.Ran two tests. Okay, great.I think that's more or less all I need from my population at the moment.Just there's my tests and that's it for the code.I'm going to stop there.Let's not get too wordy and continue to the summary.Yes, we've just implemented a very simple population class, which allows us to generate a random population of creatures and to access those through the creatures variable and so in the next video, we're going to continue with the simulation.In this video, we've just been working on the population class."
}