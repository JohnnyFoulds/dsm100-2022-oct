{
  "course": "DSM100-2022-OCT",
  "topic": "Topics 5&6: Creatures",
  "title": "Lecture: Genetic encoding problem overview",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96269&forceview=1",
  "transcript": "[music]-In this video,we're going to have an overviewof what the problem is we're trying to solvewith our genetic encoding approach.Let's just look at the summary.First of all, we're going to have an overview of the problem,and then we're going to dig into the URDF fileand think about joints, links,and then we're going to think about the control system.How are we going to operate those motors in the creature.Here is a diagram of the problem,and you can see that we've got various stages here.This bit here,this is our genetic encoding.That's the substrate for the genetic algorithm in a way.That is the list of data that it's going to be manipulating.That's the first thing,and it might be zeros and ones, or it might be floating points.Probably we're going to end up with floating points,but for now, just think of it as a string of values.Then the next step is that we're going to take thatand we have to somehow convert it into this directed graph structure,which is the creature.Each of these represents a linkand then each of the connections represents a jointand we can have multiple repeats of certain parts of the tree or the graphto give it that repeating structurethat we saw in the Sims paper and so on.That's somewhat complicated.Then after that,we need to somehow get that and convert it into a URDF file.We're going to do it that way round.We're going to come up with this interim representation,which is this data structure,but then we need to bounce that down to a URDF filebecause that means we can easily load itinto the simulation and test out the robot.Once we've got the URDF file, as I said,we can load that into the simulation,and then we'll actually get our 3D creature renderedin the environment.Now there's one other step that I didn't really mention in here,which is the control.We're going to talk about that at the end as well.How are we going to switch the motors on and off?Because there's nothing in the URDF file that explicitly says,this is what the motors do over time.It says what the capabilities are of the joints,what direction they move in and it saysthe maximum velocities and things like that,but it doesn't actually contain data about the control.We need some separate thing here.We're also going to need a separate thing,which is the control system.We're going to need that as well.That's probably going to come directly from there.When we're running a simulation, we're going to use a control system.This is similar to how Sims did it.He had his representation of a 3D morphology of the creature.Then he also had a separate thing, which was the control system.He actually had basic--Simple neuro networks and signal generators to do that.We'll follow along on that, but possibly in a slightly simplified way.What's next?Well, I said we're going to talk about the URDF file.If we're going to figure outhow we're going to encode this directed graph structure,I figured that probably if we look at the URDF fileand work out what's in there,that'll give us some really good clues about what thingswe're going to need in our genome.Because ultimately, it's going to be generated out into this XML format.If we're looking now, we can see, okay, what would be interesting to vary?We're going to be looking at this XML file with an eye to,\"Okay, I need to create lots of variation.I need this genetic algorithm to have a nice large search spacein which there might be interesting structuresand lots of variation.When we're choosing which things we want to parameterize,we have to choose based on that idea.Let's bring up the URDF file here.The first thing I wanted to look at is the links.If we go and we grab one of these links,there's the XML for a link.What have we got in there?We have the visual geometry.That's clearly interesting.To simplify things,let's just treat division and the collision geometryas the same because that just meanswe can have repeated tags basically for that.If we dig into that,what's the variation that's going on there?Well, obviously you can have different primitives.This one's got a cylinder, so maybe we could enabledifferent types of primitives,but maybe we could just stick with cylinders.That probably would be enough.Then we've got a length and a radius, so it dictates what the shape of that is.Clearly, that's something we want to be able to evolve,the size of the different components that make up the creature.That's definitely going to be a target for our genetic encoding.What else have we got in here?We've got a mass value,which it makes sense for me, the idea,the bigger the component is, the bigger the link is,probably the higher the mass should bebecause we don't want to havethe robot able to just have whatever size it wantswithout any mass requirement on that.I think we can probably set the mass based on the size of the cylinder in some way.That's the links.That's the first thing.You can see we've come up with maybe one, two, three, four,four parameters or so for the links, which is pretty simple,but there's one other thing that we need to know about the linksis how many times they connect,how many repeats of that link do we have?Remember in the Sims thing enabled this recursive thingwhere you could have, for example,four same-shaped legs hanging off of one central body.In order to enable that kind of thing,we're going to have to think of a way of repeatingbecause that'd be another parameter.It's probably about four or five parameters for these links.That's not too bad.The next thing you might want to look at is the joints.The joints connect the links together.Here's a joint,and this is where we'd probably get quite a few more parameters.First of all, we've got the type of the joint.Now, remember in pie bullets,we've got revolute joints,which are these ones that rotate with one degree of freedomand we also have sliding joints, these prismatic joints,and we've got fixed joints.Maybe we can simplify a bitand just think about revolving joints and the fixed joints.That's probably enough.That's one parameter, and then we've got this other thing,which is what does the joint connect?For a given object, which other links does it connect to?If we do a quick diagram of that,if we have something like a body part there,we've got a body part there,and they've got a whole bunch of other body parts,and they're all maybe connected together,and the question is maybe we want to havethe ability if we mutate it.It might be connected to that one, but we might get a mutationand end up connecting it to that one.We need some way of parameterizing this factor here.What is the parent and child link on a given joint.That will allow us to potentially mutate itand have a whole piece of the creature,suddenly appearing somewhere else in the creature,but being the same of subgraph, if you like.Then we can parameterize that.Then what else have we got?We've got the access thing,which is we can potentially parameterize that--Where the one goes.Then we've got this one is really interesting.This is to do with basically which axis the motor rotates around.Also when we've got the two links,how far are they from each other and which directionare they offset from each other?It's really just really definingthe structure of the creature.Those are very important parameters there.We've got probably six parameters we can mutate there.That's six, seven, and then maybe we can put some stuff into the constraintsof the joint or we could just have them all being the same, might be easier.We've got about 14 parameters or so, so far,and that's pretty good going.Now, what's next is the control system.I mentioned earlier,we went through the Sims paper and we had a lookat the control system there.Sims had a set of inputs,which were sensory inputs, which might be things like the positionof the joint, so you might have sensorsthat tell you what angle the joints are at.We fed that into an evolvable network systemwith signal generators and things in there.Then that was then fed as controlled signalsto effectively the motors in the creaturesor the muscles if you want to call it that.Now, that's somewhat complicated.You have a separate encoding for the structure, the morphology,and for the control system.I'm going to maybe simplify it a little bit,instead of having full sensor control, sensor feedback control.What I might do is just have some signal generatorsthat can generate motor control patterns over time.I've just shown here that when we're running it in simulation,we're going to have to be running our control somehow manually to controlwhat the motors are doing.Just to draw a diagram of this one,what I'd like to do here is you got two linksand you're going to have a joint between them.That is going to have some sort of motor controls.What I want to do is have a signal generator may be for each motor,which is going to generate a signal, which controls the velocity.This is going to be the velocity.If I vary the signal, then I can, maybe--If I parameterize it,I can have slow ones,I can have really ones that give you a very high velocity over time.You can have all kinds of signals and you can even have different waveforms.You could have a more of a pulse train where at one point,the velocity is maximum that way,and then it switches to maximum the other way and so on.You think about how that would work, the pulse train one,that would be a thing that swings from side to to side.Velocity would be going like thatand then suddenly it would switch to being like that.That would be the pulse train type of thing.Whereas the sign wave one is a bit more difficult to emulatewith my own muscles but it's basically accelerating isn't it?It's accelerating and easing in and easing out.You can see--Imagine a creature with a whole bunch of limbsand it's doing these different types of movementshopefully that will allow us to have a huge varietyof different ways of generating locomotive movement.What we'll do is we'll have some parameterswhich control this.You might have a parameter which is the multiplier on the amptitudeso we can scale it up or downand we might have a parameter which is the frequency there.How rapidly does it oscillate?We might have another parameter which is whether it's same waveor a pulse wave or maybe even we could havesome linear ramps as well.We've got a whole bunch of options we can do on there.We'll do that, so we'll have this control systemwhich is really just parameterized signal generatorto send pulses to the muscles to tell them what to do.That's the overview of the parameterization plan.We've talked about that.What the overall problem is getting from some genetic representationthat we can use as the substratefor the genetic algorithm and then convertingthat through various stagesinto a running physical 3D model or virtually physical 3D modelinside the simulation that's moving and has controlled muscles over time.We've gone through the URDF file, joints, links,and we've thought about controllers at the end there.In this video we've just been having a bit of a brainstormabout how we might go about parameterizingthe design of a creature such that it has a huge varietyof morphologies that are possiblebut also a variety of control systems for how it moves."
}