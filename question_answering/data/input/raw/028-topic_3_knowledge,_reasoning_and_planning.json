{
  "course": "DSM100-2022-OCT",
  "topic": "Topic 3: Knowledge, reasoning and planning",
  "title": "Lecture 4: Ontological engineering Part II",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96168&forceview=1",
  "transcript": "[music]-In this mini lecture,we will continue discussing how to construct logically consistent knowledge models.In particular,we will look at how to define instances of classesand what is the difference between instances and classes.We'll also will talk about best practices in defined relations.We will start from considered relations in a knowledge model.So far, in our example,we identified such relations as is-a and roles,races and [?] and so on.We can define more relations if necessaryto better reflect our knowledgeand also for specific applications.For example, if we are designing an agent to handle financial operations,we can add to the knowledge model such classes as payment,module cost and relations like [?] cost made payment.We have seen in the RDF notationthat each resource has a globally unique identifier.This is true not only for classes but also for relations.It is a good practice to import already defined classesinstead of redefining them with a different UDI.The same applies to relations.Instead of defining some ad hoc,you can use already defined relations.For example, FOAF or friend or friend ontology,define such relations as name, title, [?].Dublin Core ontology defines such relations as creator,identifier, references.Now, we will talk about instances.As we discussed before,a good approach to knowledge modelling is to define first what is what.To put an is-a hierarchy in place before defining any other relationships.An is-a hierarchy can be extended by instance of relations.Not all knowledge models include instances,and it is perfectly all right for a model to define only classes.It is considered to be a conceptual modelling.For many applications,it is necessary to define instances of classes.For example,we may need to add to our example knowledge modelabout the program concrete students,tutors and module leadersas instances of generic classes,student, tutor and module leader.If an agent has to deal with a particular query,then it needs to know who raised it and to whom it assigned to handle.Sometimes, it's difficult to decideif the model and entity as a class or as an instance.Let us consider the class machine learning module.Depended on an application,we could model ML, AI or neural networksas instances of the class module.However,for dealing with queries,we have to define ML as a classand each version of it as an instance.There are several versions of the same machine learning module,for examples in modules that started last year in Octoberand another one that started this year in April.It is important to specifyto what version a student is enrolledeven if the module is essentially the same.One reason is the tutors are assigned to a concrete version of the module.Another reason is that it actually beneficialto keep the history of all previous queriesand perhaps an answer has been already given to a similar query.What is important to understand isif a relation is defined between two classes,for example, student enrolls module,then all instances of those classesshould also be connected by that relation.That means that each student has to be enrolled to at least one module.If a relation handles is defined between the classes,academic queries and tutor,that means that each instance of an academic querymust be assigned to an individual tutor.Instances of a class are defined by the RDF statementsimilar to how classes are defined.In this mini lecture,we'll continue to learn how to design good knowledge models.We talked about how to define instances of classesand how to reuse already defined relations."
}