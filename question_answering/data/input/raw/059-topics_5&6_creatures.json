{
  "course": "DSM100-2022-OCT",
  "topic": "Topics 5&6: Creatures",
  "title": "Lecture: Deciding on the parameters and their ranges",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96271&forceview=1",
  "transcript": "[music]In this video, we're going to roll our sleeves up,I've already got mine rolled up.We're going to work out what the actual parametersare going to be for my GNOMEso that we know when we start programming it,we know how we're going to turn the GNOME into actual parametersfor the creature.In summary, I'm going to be talking about the parameters for a link.I'm going to talk about the parameters for joints,and parameters for the control system.The Links, let's start with that.I'm going to do it all in my text editor, actually.What I want to do is just basically end up with a list of parameters.Now, the first thing I'm going to say is,I've decided that I'm going to use real values in my GNOME,so I'm going to have floating-point values in the range zero to one.The GNOME itself is going to basically just contain random numbersbetween zero and one. Let's start.The challenge here is to get from,say whatever it is into an appropriate parameter,the thing I'm talking about.The first step is to get a list of all the parameters I want.Then I'm going to think about what their ranges might be.Let's look at this URDF file.Now it gives us some clues about what we need here.The first thing we want to parameterize is the links.The key thing that we talked about in the links is the really the geometry,so it's this tag here.We need to parameterize the geometry of the link,which means we need to know the length, the radius,and possibly what the shape it is.Let's come up with a parameter one or zerobecause we're computer scientists so we start with zero.The shape parameter is going to encode,whether it's a cylinder or a box.It's basically our two values.Then we're going to have a length and a radius.We call it link-length.Let's prefix them with links so we know they're link parameters.That's really clear then. Link-length.As I said we're going to come up with ranges for these later so link the--What's the other one, link is radius.If it is a box, then maybe it has a size,so you could use that as the width and the height of the box or something,but that's okay.We'll just call it that for now,it doesn't really matter what we use it for in the end.That is more or less the link parameterizedbecause the things going to be built out of multiple primitive objects.They might be cylinders or boxes,and they have a couple of parameters controlling the size.That's that.Then the only other thing with links is,remember they have this sort of directed graph thing,where they recurs into each other,so we might have multiple instances of a link.What I'm going to do is have another parameter which is called recurrence,which is-- Let's call it link-recurrence.We'll think about the range of these in a minute.That's really my link parameterized.Then what about the joints,well let's have a look at those.These have got a few more parameters, haven't they?Because with the joints, you can do things like--Oh, one thing I spotted that we missed is mass.Whoops, forgot about the mass.We could just have a parameter for that,but we might end up throwing it away later on.I'm not holding myself to these parameters.When we get into programming,we might throw some of them away or create new ones, that's fine.Let's put mass in there for now,because we could potentially assume that all of the materialthat the creatures are made out of has the same density,and therefore we can calculate the mass,based on the size and the shape.For now, let's put it in as a parameter sowe can have different densities or whatever.That's cool.Next one we want to look at the joints and how do we parameterize a joint.We have the first thing to think about with the type.What type of joint is it?I'm going to fix some fixed joints and revolving joints.I'm not going to worry about these prismatic jointsbecause I haven't really worked with those and I don't really need them.I'm just going to say 5-joint-type.That can be either revolute or it can be fixed.Then number six is going to be the linking.We have a parameter with a join which dictateswhich two links it's connected together.If we have to draw that, I've got my drawings here.If we have two links, so two body parts,let's say we've got a whole lot of body partsand we're parameterizing which one's connected to which.The link would say, \"Oh, which one are you connected to?\"They can connect to whichever ones they like.If we parameterize that potentially that means we couldmutate it at some point, and you might end up going,\"Okay I'm going to now connect to that one instead, instead of that one.\"By parameterizing it, it becomes mutatable.Remember the objective here is to come up with--We're inventing the space here.We're inventing the space of possible morphologies and possible control systems.We're trying to make a nice rich space with lots of possible variation.If we parameterize which link is connected to, that's great.That's obviously a good idea.We'll call it joint-parent.That will be zero-- I'll talk about the range afterwards.Let's carry on.It will be one of the available other links basically.Now let's go to next one.Then we've got this axis xyz thing.It'd be good if we can choose which of those we have a one in.If we could have three options there.We could do 7-axis-xyz, which going to be three options,which are going to be 1,0,0 or 0,1,0or it's going to be for completeness 0,0,1.Those are the three options for that.That's three options.Next step is that we got this limit effort thing now.Have to be honest, when I was experimenting with PyBullet,I found that these things didn't really controlwhat I was allowed to do with the motors.I assumed that a limit tag and maybe I'm using it wrong,but I assumed that the limit tag would say,\"Okay, you can't have a motor on really powerfully because we'll block it,\"but it doesn't seem to actually affect it,so I tried different values in there and still I was able tohave really fast-moving motors with high force.I'm not sure if this the limit tag is the correct one to use for doing thatso I'm going to ignore that.I'm going to go straight into the origin.The origin tag has six parameters in there,so we're going to add another six parametersfor rpy one, two, and three, and xyz one, two, and three.Remember, rpy is-- we got to do the rot--where the motor rotates and where it was placed relative to the roadto where the link is placed relative to the parent link.We're going to have six parameters there.We'd call 8-origin and we'll call it rpy-1which is going to be zero to one, probably,or there might be zero to two pi because it's kind of a rotation, isn't it?Let's call it-- I said we weren't going to do the range yet but now we are.That's all right.To find the right one we'll come back to this.That's one, two, three.That should be 9 and 10.Then we'll do origin-xyz, so origin-xyz-1.That's the distance sort of a vector defining a differencebetween the position of the parent link and the child link.I think we'll set that to zero to one for now and we'll come back.That can be one, two, three.That is all the parameters my links enjoy.Let's quickly whiz through and think of ranges for those.That's obviously got a range of, I see the one or the other.It's kind of a binary value that one.That one link-length that's how long it's a piece of string,how long is the virtual 3D cylinder.Let's just 0-1 it for now, and we can come back to that.Then the recurrence is that how many times.It could either be zero, in other words or one.If in other words, it only has one instance of it,or it could go up to say four so it can have up to four connectionsor something like that, and that's good.Let's do mass 0-1 one as well.I'm not going to hold myself to these but we just put some numbers in for now.This is an interesting one.Now, in terms of which parent we connect to.I've built various genetic algorithm systems beforeand I quite liked the idea of a developmental process,and some of the literature seems to reportthat having a developmental process leads tomore interesting and better evolution, basically.What do we mean by developmental process?I'll just briefly explained that.What the idea of the developmental process israther than just instantiating the whole thing like bang there it is.What we do is we do it piece by piece.It's okay there's one link, and then we did instantiate there another link.Then when we're thinking about, which one is this going to connect to,well it's only got one option so it's always going to connect to that.Then, let's put another link out there.Now, this one because I'm doing it link by link has now two optionsas to which one it connects to.What I will do is this parameter here is going to dictatewhich of those options it chooses.This option is going to dictate which of thosetwo does it join to that one or that one.Then when we get in another one here,so this one now has three options.We just have to dynamically scale that parameterso that it chooses from the full range of available links,and that's going to be fun to program but we'll get to that.Okay, let's just put a number of links there just so we know what that is,and then we've got axes x, y, z,three options, we done those,and I think that's is all done.The final thing is to think about the control system.Remember, I want to have these signal generators,so I'm going to say 14 control.That should be prefixed with links, strictly speaking.I'm sorry joints.Let me just put those prefixes in,  o it's all correct, it's all joints.They're quite long names, but they're very descriptive,so I know exactly what they're going to be so when I get them in my code,it'll be really clear what's going on.Control, so I'm going to have a waveform.I'm going to have amplitude,then I'm going to have a frequency.The waveform will be either sine, pulse, or ramp,and the amplitude doesn't matter,it's going to be between zero and one so because remember,the amplitude is going to dictate what is the speed of the motor.If it's one, then the motors at maximum speedso it allows us to vary the speed.Yes, we could say,\"Well, we don't want the motors moving too fast,\"so we can put that fairly low for now.Then the frequency is how often it changes the polarity of the motorif you like, so when the polarity is positive,the motors going one wayand when it's negative, it's going the other way,so we could have that as being zero to one as wellbecause it depends how fast the simulation runs and how often it callsupdate on our control system so we can fiddle with that later.Okay, that gives us a general idea.I think that's it, so we've ended up with, what, 17 parameters.In this video, we've been going throughand working out all the different parameters we needto control the morphology or to define the morphologyin the control system for our creatures.We've been looking at the links, how we can parameterize the links,how we can parameterize the joints,how we can parameterize the control system.We've now got 17 parameters,which we're going to be working on when we start getting into the code.Okay, so in this video, we've just beenfiguring out how to parameterize our creature."
}