{
  "course": "DSM100-2022-OCT",
  "topic": "Topic 7: Robot Scientist",
  "title": "Lecture 7: Modelling a toy domain (demo)",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96380&forceview=1",
  "transcript": "[music]In this mini lecture, we will look inside a Knowledge Agent.This agent contains knowledge about our domain of drug design.It's an important agent because other agents can communicatewith this agent and consume this information.In this mini lecture, we will look at how to encodeour conceptual knowledge models that we already developedin a machine process able format.We will use a tool named \"Protégé\" to do that.Protégé was developed in Stanford Universityand it's a popular tool.It is good because it enforce in you to follow clean, logical structure.It is easy to install and tutorial is available.People use the very simple operations and they're enough to encodethe knowledge model.In our case, we will do it finally in RDF format,Resource Description Framework and serialization Turtlebecause it's more readable for humans.I will show you how to do it.This is an interface of Protégéand the main tabs are entities.You can press, you will see more types.What we will use is classes, individuals.These are nodes in our knowledge model.Classes it's more generic types, like chemical entity,individuals is concrete chemical, so instances of these classes.There are also links between nodes as they can be between classes,then it's object properties or between individuals instancesand classes, then its data properties.Okay, so you already see one class is defined.It thinks, it's anything.This is our root node, so the very top of our tree.We will grow tree like logical structure, is a hierarchyand that is what can be used for reasoning.You also see that there isan automatically generated UDI.We can change it.We can use different UDI.We can register, put it somewhere, but we'll keep it for now.Now, when I want to add classes, I just press this buttonand it will go to the next level.I want to add chemical entity. Okay.We have next level in our hierarchyand you can see that Protégé generatesthis Unique Resource Identifier for each class.It just add in label and this is how it ensuresthat everything, what is defined here, has unique resource identifier,and that is important.Okay, now we will grow our tree further.We want to tell that some chemicalsare drugs, and some chemicals are toxins.They're on the same level, so we will use these buttons.You can see pictograms, quite informative.Toxin.Okay, and again, you see it generatesthis UDIs for toxin and drug.If we don't know what chemical compound is,we can keep it just like chemical entity, or if we know if it is drug,we can add instances as drug, or even now toxin,we can now add instances as toxin.Let's add one instance.We will add morphine, and morphine is a well known drug.Yes, so we go to individuals,the class drug is highlightedand we can add instance or we will add, the same logic,you just press the button is plus, and it adds your new entities, morphine.We have this instance.Now, if we go back to class view drugand we can see, at least,what instances it has.We can add, of course, much more.Now, what we will do, we will do agent links.We have six properties of chemical entities.I will show you how to add it.You can use subclass,of, and data restriction, create.You can use properties to link it,but first, we need to define this property.Let's go, data property.The same logic, you already have a top data propertyand you can add what you need.Let's add molecular weight.Okay, we have this property.Now, we can link.We can link chemical entity.We can say that every chemical entity has a molecular weight,subclass of data restriction.Now, we can say that we want this linkand we also can say what is the data is,so we can do it later. Okay.Now, what is happening? What is interesting?This logicallow us to propagate these properties.We defined it for chemical entity and now we see that all other subclassesinherited this property.Drugs, so they all havethis property molecular weight.Good.Now, let us say that morphinehas this concrete weight.We can add this, it's also molecular weightand we can put those.The weight is 285 [?].Okay, so we have molecular weightand, of course, we can add more instances.I will not do it right now.What I want to show is a set of nodes that a toxin cannot be drug,not just because it is toxic.We can say it explicitly and quite easilyusing these disjoint ways, so we can put,\"The toxin is disjoint with drug\".Okay, and if we go to drugs that it's automatically alreadyand further it's also disjoint with toxins.Now, I will show you how to use Reasoner.Protégé has inbuilt Reasoners.In this case it's Fact++ and HermiT.We can use any of it.We can start Reasoner and it will check if our logical structure's clean and nice,if there are no errors.Of course, we have only three classes.One instance, it's easy for us to maintain logical consistency.If there are more and if you're aiding more restrictions or this properties,they start to build complexity,then it's extremely difficult to make surethat logical structure is clean.It is essential to use a Reasoner to check that everything is all right.If something is wrong, then you will see it's in red.In our case, it looks fine and this asserted, it is what we--Invert what Reasoner can invert and that is fine.Asserted, so everything is well.Just to show you how it lookswhen things are not right, I will put here that the chemicalis disjoint with toxins.We may assume that if it's toxin, we just don't want to considerany of these chemicals.Yes, let's put it like that.Let's run Reasoner now.It doesn't run. Start Reasoner.Toxin disjoint as chemical entity.Start Reasoner.Yes, so you see that something is wrong because something appears in red.This system is not happy about it, so it shows that something is not right.It's possible to see explanation, has generated explanation,what is inconsistent with what, but we will not go into it.Let's fix it, let's remove it.We don't want this being disjoint.Stop Reasoner and start again.Now, everything is fine.One more things that are here, I want to show you is a defined class.We want to capture knowledge that if molecule is small enoughthat it's more likely to be a drug.We can add here concept of a small molecule.What is a small molecule when molecular weightis below a certain weight?Let's add the class, small molecule.Let's make it defined class.Defined class, it means that we explicitly define conditions,so what is this class?We will use class expression editor.What we will want to say is that any chemical that hasa molecular weight below certain number can be considered as a small molecule.We need the chemical entity.While it is in red, so instruction is wrong,so we need to continue before the editor can understand it.Now, we want to put this restrictions,'molecular weight'.If you remember when we defined the options, some,exactly, so I just mimic from that.If I remember correctly, it was rational.We just put below certain number.Still not happy.Data type, rational.Let's put 'integer'.I think it's not happy because it is how we defined the property.Let's try to fix it then later the property here.Let's go to individuals,drug, morphine.Yes, it is integer here, molecular but integer.Okay. Fine. Chemical entity.I just thought you could.Here, rational, so let's check.I could select it immediately, but I was too lazy.Now, I cannot spell it. Integer.Now, let's try again.We want to put this class expression editor.It still doesn't want.Chemical entity and molecular weights.Oh, it wanted the-- Okay, so, yes, you need to know how to do it,but I just will show you once and that's it, you don't need it.Any chemical entity with a weight less than 800.Okay, I put it in the wrong place.Small molecular.I added that restriction to small molecules.Equivalent to class expression editor.Now, we can put this class expression editor.Yes, and it comes in here.Now, you can see this symbol, equal, so it's 'small molecule'.What is happening now?If we're on a Reasoner, Stop Reasoner.Let's use this Reasoner.Start Reasoner.It inferred that Morphine is a small moleculebecause it weighed below 800.If we go to individuals, it shows.Morphine, it's a drug, but it's also a small molecule.This is how Protégé can check your logical structures,that its claims there are no contradictions,no unexpected, what is called Entitlement.Also, it can help with the inference of new facts.We didn't put explicitly that Morphine is a small molecule,but if a class small molecule is defined like that,deductive Reasoner can pick up and classify.This is classification.Our instances can be classified and you can imagine many rules,but we will not do it.I just wanted to show you this deductive reason and classification.What we will do now, we will save this file.'File Save As'.We can select the input format we would like.We will use Total Syntax because it's easier for humansto read this. Just okay.It will give you an optionwhere to save it and also a name,so we will put this.I already have a folder, total, but scientists but you can select 'Save'.I would like to show you how to capture such knowledgethat some molecules are small enough to go through our membrane.They are called small molecules and they are more likely to be drugs.What we want to do, we want to add the class.We will make it a defined class.Class that has the precise conditionwhen instances will be considered as such.In our case, we want to say that every chemical entitiesthat has molecular weight below certain number can be considereda small molecule.Let's do that.We will add this class small moleculeand we don't make it a different class.To do that, we use class Expression Editor and I already prepared it at home.What it says that any chemical entity, a just logical expressionand molecular weight below certain number,then that is that class.You see the pictogram for the class changed.It's now defined class and what is happening now?If we start Reasoner,you can see it inferred that morphineis a small molecule because it hassmall enough molecular weight.This is called Classification.Reasoner can do deductive reasoning and classify instancesinto defined classes.Again, it's a very simple knowledge model, but you can emerge in many rulesdefined classes and then your supply instance,you just put it on this level or whatever your knowledge model is,and then the system can classify these instances followingthese logical conditions. Wonderful.Now, we want to, of course, we can add all other propertiesand all other instances, but I will not do it.It's just the demos with the same operations.I will show you how to save this file now in the format that we want.You just go File Save as usual.We want Save As.You can select many options.We will use Turtle because it's more readable.It gives you an option where to put it.Let's go with the best knowledge baseand where we want to do.I have forwarded to a robot scientist, let's put it there.Now, if we go to the folder to robot scientists,yes, test, knowledge base.You see that extension is actually all still.I would recommend you to change it just for future usesbecause, yes, we want to use it.Because we will consume this knowledge model using Python,so other agents that will be encoded in python can work with this.Let's just look on site.Let's open it with text editor.This is what was generated.Just very briefly, we will look at it to all sort of prefixes,what stands for what, so it's all based on this UDIs.It starts from this UDI that was generated for ontology,so we just can put different here what we want, but we will keep it.It immediately says, this type so that this is an ontology,so effectively what we created.We created a knowledge model in the form of an ontology.Then we have data property.We put only one data property, so molecular with RDF type.It's a data property.Yes, this is what we wanted, classes.Then for each class, we have name, type that it's class,and it shows what subclasses it hasand so on, drug.Here, our different class small molecule.Again, it's all here, all this maximum,minimum, so it can be far more complicated rulesthat we added.Now, individuals, there is only one individual to morphine,so this all generated.This is how it looks like.This is what the machine learning tools can consume,if they can work with this, the python also can consume it.In this mini-lecture, we lookedat how to translatethe conceptual knowledge model into machine processable format.Using Protégé, we generated an RTF file in total serialization,and we added key nodes and key relations between our nodes."
}