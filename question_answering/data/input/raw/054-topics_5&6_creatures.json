{
  "course": "DSM100-2022-OCT",
  "topic": "Topics 5&6: Creatures",
  "title": "Lecture: Moving a URDF robot",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96257&forceview=1",
  "transcript": "[music]In this video, we're going to be looking athow we can move our robotsby setting various properties on the joints.In summary, we're going to talk about different joint types, first of all,and then how we can get information about joints,how we can move them,and we're going to see if we can add more joints and move multiple joints,and at the end, we might see if we can move the jointson one of our preset robots to see how that works.First of all,different types of joints.There were three joints availablein PyBullet,but URDF actually supportsmore joints than that,but they just aren't currently implementedin PyBulletbecause they have more than one degree of freedom.The different joints are revolute.Revolute is basicallya joint that can rotate in one angle,so it can in that angle or that angleor that angle.You can rotate in one angle at a time,but that's not really much of a limitationbecause could you have multiple jointseach of which is allowed to rotate at different anglesand that would give you a really flexiblekind of movement, so it's not really much of a limitation.Then you've got prismatic jointswhich move along a single axis.They might move backwards and forwardsand that's more for say you're building industrial robotslike a thing that slides along and picks things up or whatever.Then the other type of joint is the fixed jointand that one that doesn't move.Just to clarify,in the manual for PyBulletat the time of filming at least,it says, \"We only support one degree for either motorized jointsat the moment;sliding joint and revolute joint,\"and the sliding joint is a prismatic joint.That's different types of joints.Let's get on with it and see if we can move something.I'm just going to put that one over thereand I'm going to put the animation now.Just to show you I've added one more command to the starter file herewhich is this cooling configuredebug visualizerand I'm setting the enable GUI flag to zero.Now, you'll see what difference that makes when I run it.I'll run starterand let's just pop that over there.You can see now over therethat I've got rid of the panels on the GUIjust so that we can see more of the robots.How are we going to move a joint?The first thing we need to dois just to check the XML filewe've been working on. Previously, we had fixed here.We had a fixed joint therewhich is not a lot of usebecause we won't be able to move it.I'm going to send it to a revolute jointbecause that's the type of thingI want to use.I want to be able to have a natural-ish robot arm-type things.Revolute, so we send it to that,and then we go back to the codeand what I can do is I can now load up a robotusing that specification.rob1 = p.loadURDFand it's 101.URDF.Run that.Oops,sorry.There's my robot over there,and I'll just zoom in a little bit.Now what I want to do next isset the simulation to run in real-time.Yes, she does, so you see the robot flew up over there.What I can do isI can actually reset the position of the robotto the center of the screen.Reset.Yes, that's it, resetface positionand orientationso I can put Rob1 back where I want him.You'll see the numbers I'm putting in there.This X, Y, Z, so that's the position.I'm going to put the robot slightly in the airso it falls downand we'll see what that does.This is the orientationwhich is a 4D vector.It's going to do that like that,and so you see that drops it may be a little bit higherso it doesn't fall too far from the center.Here we go.I can run that command to reset the position of the robot.Now let's zoom in a bitand see how we can go about,or I can drag it. Let's zoom inand see if we can move that joint.The next step is to setsetJointMotorControl2.Now, there's an old version of this which is without the twoand that doesn't work or is deprecatedso we don't use that one.This takes various parameters.Now you have to look up in the manualwhat the parameters are here.I'll illustrate some of them for you actually.The way I learn this stuff is by reading the manual, of course,I didn't just guess.Let's put the commands in.The first option is the ID of the robot,so that is going to be Rob1.Oops,let's get it to the right. We know Rob1.Right, Rob1.The second argument is the idea of the joint.Now it's only got one joint,so that means it's going to have ID zero.Each joint is zero, one throughthe number of joints minus one basically.That's Rob0,and then we need to do is say what type ofmode it is,so the control mode parameter.This is the manual here.The control mode parameterand I'm going to do velocity control for nowand then we're going to look at position control in a minute.We do control modeis p.velocity control,so controlmode=p.VELOCITY_CONTROL,and then I can set a target velocity.I'm going to set this to 0.1.Let's look at that robotand see what happens.Can you see thatit's slowly moving now?Let's make it go a bit faster.You can see over there,You can see that the robot is now moving.It's basically rotating that thing.You can see that the joint is got complete,it can rotate all the way around.I might want to constrain that,but I'll not bother at the moment.That's what velocity control is.Basically, you can set the speedthat you want it to rotate at,you can rotate really fastand you can see if you've got a nice fast-rotating thing,it's actually walking,so woo the evolved walking creature.What about if I set it to -5,is it going to come back?Where's it gone? Yes, there we go.It's a basicI've invented the wheel kind of.Remember, I can always reset it backwith this command.There we go, dropping back.If at any point you want to stop it from rotating,you can just set the velocity to zero,and now it stops.That's the velocity control.Basically, it's like you've got a speed control on the motorand you're just setting that.You can see it actually isn't constrainedto a maximum,so that allows it to actuallyreally exploit the physics engine and spin around.Let's put that backand see if it falls back down to earth again.There we go and then bring it back.It's now moving slowly again.What about position control?That allows you to essentially tell it,\"Okay, I want you to move] to a specific positionat a specific speed.\"If I do position control here,and then a velocity.Also, I need to set a target position,so I need to get another one of these argumentswhich is the target position argument.I need to specify that as well,target positionbecause otherwise,how does it know where to move to?Let's do that, 0.5 like thatand see what that does.The velocity seems to be a bit too fast.Let's just reset it again.It looks like these target velocity,maybe I need to switch it backto target velocity zero,reset it,and then maybe set the position controlusing that.It's moved in the right position.Let's go to 0.5.Oh, it's a bit slow.Doesn't seem to be doing a lot.Let's try five.Yes, there we go.You can seeit's moving to a specific positionand that isgoing at a certain speed.That's the position control,it allows you to move it to a specific positionmore like a server type of dealrather than a locomotivethat you switch on and off.That's probably enough playing around.You can obviously go and experiment with this yourselfand try out different speeds and so on.The next thing ishow do you get information about joints?How do you knowwhat a joint is capable of doing or what the properties are?That, we can do P.getJointInfoand we pass the name of the robotand maybe a jointand you can see the ID of the joint,so Rob1 and 0.You can see I get a bunch of data back here,and it tells mewhat the name of the joint is.This one is interesting.This tells me what the type of the joint is.If we check what a zero is,that will be p.JOINT_REVOLUTE.I think you find that type zero, yes.The other one is the PRISMATIC 1,which is type 1.That's the type.If you look at the manual, it will tell you exactlywhat each of these properties are.It's to do with the maximum speed of itand other constraints on the joint there.That's just how we probe a joint.Moving on.Let's say you wanted to have some more joints.Let's see if we could quickly update this fileto add another linkand create ourselves another joint.We're going to have sub_link2,and this one is going to bemaybe a great bit long,one very thin and long,and then this one is going to beconnected to here.I need another joint because I've added another link,and sub_link2 since it's going to bebaseline to sub_link2,and whatever.That's all fine. Let's just do that.Let's load in Rob3to the environment.rob2 = p.loadURDFand it's going to be ('101.urdf').Yes,something wrong with my URDF file.\"Warning, joint is not ununique.\"I need to come up with a unique joint name.There we go. I just changed that.Let's try that again.Yes.Hopefully, we've got our Rob2 in there.Let's try resetting the positionof that one,reset position and orientation.I'm just going up back through my commands here,so this is going to be Rob2.Really?Where is my Rob2?Oh, there it is. Right, there is Rob2.Now, that one's got two joints.You can see I've got the twodifferent things.Let's see if I can do that.If I move Rob1 out of the way.Sorry, this is a bit of a slow process,but I'm clumsily moving theseannoying robots around.Let's get that one right out of the way.Right, there we go. Shove that out of the way.Now, I can concentrate on this one.Now, I've got two joints,so if I set a joint position on Rob2,so let's do VELOCITY_CONTROLso we can basically set them both spinning around, right?VELOCITY.We don't need a target position on VELOCITY_CONTROL,so we'll set the velocity to 0.5.Okay, so one's moving,and then let's do the other one.I need to change the joint ID,which is the second property there.Now, we've got two joints moving,so let's see if we can get a better view of that.Oops.There it is.Now, it's got two joints that are moving,so you can see, thinking ahead a few steps,we're going to be evolvingthese propertiesand how the joints move, and things like thatand also what the shape of the things areand how they are in orientation to each other.You can see,they're already getting some interestingvariation herearound what we do with the different joints.I think I'm going to end the video herebecause I think this is a good point to end.We've seen how we can basicallyuse the various functions builtinto PyBullet to configure the jointsof our robot using a URDF file,and then switch the motors onand move them to different positions.We've seen, as you can see behind me there,that you can actually, very quickly,just a couple of joints, a couple of thingsjust start getting some interesting moving behavior.That's exactly what we're going to get our genetic algorithm to explore,the space of possible configurations of linksand shapes and different motor controls,and we'll see whether we can evolve some interestingmoving behaviors.Let me just quickly jump to my summary.In summary, we've just been looking atdifferent joint types,we've been looking at how we can getinformation about jointsand how we can move the joints usingpositional moving and velocity moving.We've added extra joints and moved multiple jointsat the same time,and you can see that you get these interesting, weirdmovements happening very quickly,and that's more or less it.In this video, we've just been exploring joints,and links and move different types of movementand different types of joints."
}