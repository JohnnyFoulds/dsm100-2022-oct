{
  "course": "DSM100-2022-OCT",
  "topic": "Topics 5&6: Creatures",
  "title": "Lecture: Genome spec",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96279&forceview=1",
  "transcript": "[music][music]-In this video, we're going to be building out our genome spec,which is going to be a dictionary that helps us to work with the genome data.First of all,we're going to look at what the genome spec is going to be doing.Then we're going to implement this idea of getting the genome, values in the genomeand scaling them into the range that we need.First of all,it's a little bit of planning here.What we want is some descriptor of the genomeso that we can-- You see that first line there,so gene[spec[\"link-length\"] [\"ind\"]].The idea is that if I've got a gene with random numbers inthat I can pull out the number that I need for the link-length.Remember, link-length is the size of one of these partsthat makes up the creature.If I want to find outwhen I'm building the creature from the genome,I want to find out what is the length of the link.Then this syntax here, you can see it's going to be quite helpful.I can get my gene and I can pull out the data.This is the idea. Then we'll have the secondary,we want to be able to get a scaled genomewhere we can basically parse those raw numbers between zero and onethat we saw earlier, and we can get back.You can automatically scale all of them by their right amounts.We need some kind of descriptor dictionary,which has all of these different parametersand maps them to scaling factorsand gene positions.We're going to need this index parameter for every one of our genomic parameters,and we're going to need some scaler parameters as well.Let's see how we go about doing that.First of all,I'm just going to look at the parameters to remind ourselves what they look like.We went through and we came up with this list of parameters.What I'm going to do is, basically, just turn that into a Python dictionaryin the format that I want.Let's just take that and copy it into the genome object here.We've got this get_gene_spec here.How do I convert this into a dictionary?I'm not doing this test-driven style.Sorry. I just need to build this back up first.What we need to do is I'm going to dump these indexes firstbecause I might want to insert more parameters laterso I don't want to hard code all the indexes.The index, in theory, that would be the position in the genewhere that parameter exists.At the moment, I just want to have--That's new genes_spec equals--We can just put it all in a big dictionary to find it there.Then what we're going to do isI'm breaking the laws of test-driven development here.I should've written a test first which is failing.All right. Call me red-handed, I'm going to do it.There we go. Let's do testGenomeSpecHas an index.testGenomeSpecHas--What's one of those parameters, link length, HasLinkLength.There you go. A failing test for you.HasLinkLength genome spec.test assertIsNotNone(spec['link-length'])How about that? There we go.We've got a test that will fail now.It's going to just crush out terribly because the code doesn't work at all.KeyError link-length. Great.I've no idea how I managed to process that, but anyway.We got gene_spec.link-shape is going to be--What I want to do is I need to have the link-shapeand then it's going to have some--That's the key name,so I need to put that in quotes.It's going to take a little while, we can probably fast forwardto the point where I've actually done this,but let's do it anyway.You can always put the video on to double speed to watch me doing this.There we go.That's all the parameters there,I don't need the numbers.I'm going to put all those in.Disappear off the screen, so you don't need to see me staring downat my code editor here.Those are all the parameters.What I want to do is just prefix them all with a quote.Let's just do that.Oops,not a quote and a bracket, but just a quote.It takes me back to the days of programming trackers on [?]when we used to program in endless drum brakesand have this really fast patterning of keyboard,shortcuts that you do.There we go, so we do that.Let's do that.These are all the properties in my dictionary,and they're going to have one for each of the parameters we figured out earlier.That would allow us to basically have a bunch of these.Oops, the code goes there.Then the next question is, what am I going to put into this?I need to have basically the range.We can do another dictionarywhich will be scale factor,which is going to be one,so that one is not going to get scaled effectively.We can edit these as we go through later, can't we, to tweak the encoding.It's going to have a scale of one, that scale of one.Now, that one's going one to four, so that's going to have scale of four.Oops, forgot their commas.This one is scale of one.That's going to not scale. All of these are all scale of one.Like I say, feel free to fast forward.Now, this is an interesting one. This is the one thatis controlled by the number of links.Remember our developmental process.Then this one doesn't need to scale.Oh, that's up to two-pi,so let's do up to an np.pi * 2.These are all two-pi because their rotations and radians.We're building up our gene spec care here, we're saying explicitlywhat it's going to be doing.Oh, that's not a rotation, that can be a scalar of--That's how far is away from its parent link.That's going to be just up to one at the moment.Getting there.This one, that's going to be a selector inside an array,but we will deal with that later.That's going to be 0.25, so we don't want to go--That's the maximum speed of the motor.Then that is the maximum frequency of a motor.I think that is it.That's my dictionary.Let's get all of that,and do there.Let's tab it in.That should do it,and returngene_spec.Let's save that, run the test, see if it works.Brilliant. I'm parsing my tests now,I'm back. I've now got my basic gene spec which now--Remember, this is what I'm aiming for.I want to have a gene specwhich I can then use to index into the genesand also do scaling.At the moment, it doesn't have an indexbecause remember, I moved all those indexes,but because I don't want to have to hard code all the indexesbecause that's a bit of a pain.What I want to do is I'm going to write another test to verifythat both that we have a link.The link-length has an index.The index is going to be the position in the gene array where that exists.I'm just going to verify that.It doesn't work.KeyError ind because there is no ind, there's a scale,there is no ind.What I'll do is I can just iterate over thisfor key in gene_spec.keys.What I'm going to do, is keys--Because I switched languages all the time,I can never remember how I pull things off of where.Let's do a quick dictionary.This is what I do. Whoops, test equals hello.Then if I do--Sorry, that's a list,test equals hello.x.keys, is it a function? I can't remember.Yes, it's a function so you have to call it.It's a function x.keys.Then what we're going to do is we're going to say,we're going to have this index, so index = 0, index = index + 1.I'm going to say that gene_spec,its keys for keyequals index.I'm going to add a new key to it called index equals ind.That should work, and I'll parse my test now. Good.We can even print out the gene_spec just to verifythat it's not completely crackersbecause that is a problem with these unit tests.Sometimes you're wondering,is it actually doing anything sensible?Right, so there's our gene spec there.You can see we've got all of the different parametersand each of them has it's own scaler.In theory, so I can now use this in combinationwith the gene generator to pull out properties.For example, I could do a test that says testGenSpecScale.I'll get the gene specand then I get a random gene.Let's do that. Genome is random gene, right?Then I can sayself.assertGreater than--I want to insert the gene,then I can do spec.There's exactly that code that we saw on the slide basically,[spec[\"link-length\"][\"ind\"]].Let me make it bigger for you, link-length,ind.I'm changing my quotes all the time.Okay. What I want to do is insert that I can actuallypull out a gene that's greater than zero, because it should be.What I'm doing is I'm now using my gene spec to pull a value out of my gene.That means that is more readablebecause otherwise if I pull gene number index three,what is that? We don't know, right?If we say pull gene link-length,that's giving me the gene length, the link-length from the gene.That's the idea.It's all about trying to have a more readable code.Okay, that is parsing.I was able to pull out something from the geneand it's able to verify that it's greater than zero.Okay. That's the basic thing for my gene spec.We're going to be using that gene spec in lots of different placesas we develop the genetic algorithm.Let's go to the summary.We've just been building out the genome spec objectwhich allows us to--It's a dictionary really, which is an object.It allows us to index into the genesand pull out what we need for a given purpose.In the latter videos, we're going to be then using that to convert the genesinto sets of links and the joints.Yes, we've just be working on our genes specification dictionary."
}