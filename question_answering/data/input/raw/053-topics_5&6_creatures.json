{
  "course": "DSM100-2022-OCT",
  "topic": "Topics 5&6: Creatures",
  "title": "Lecture: Write a URDF file from scratch",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96252&forceview=1",
  "transcript": "[music]In this video, we're going to write  our own new URDF file from scratch.We're going to learn exactly how they work from line by line.Okay. In summary, we're going to talk  about how we can handcraft a URDF file and we're going to start with one link  and we're going to test that out in various ways, and then  we're going to add set up two links with a joint between them.Okay.First of all, handcrafting  a URDF file with one link.Okay.Let's just have a look at that  so you can, if I bring up my code editor here,  I should have that code.I've got a little bit of extra.  We don't need that for now.There we go so there it is.We've got the XML starter there  and then we've got the robot tag and we can give the robot a name and then we have a link.This is basically a robot that  just has one part and it's this link, and then we've got a visual geometry  for that link, which is a cylinder with a certain length and radius.Let's try this one out  and just see what happens.ipython and I'm  going to do run start.I've just added an extra line  to my starter code.I've added this line here.Now, this is really useful when  you're working with URDF files and testing them out because i t tells it if you don't set that to zero, every time you edit your URDF file  and try and load it back in again, it will have cached it so it won't  update to the latest version and that's really annoying.  I'm glad I found that and told you.Anyway, so let's run the starter code  and get our environment running.Okay and then what we're going to do  is we're going to try and load that--so let's just verify  we're in the right folder.There's the XML file there  and let's load it in so we do rob1 = P.loadURDF file  and it's going to be 101.urdf.It's that single link file and there  we go, did a bit of complaining.I wasn't totally happy, but I did  a fair bit of work to work out the minimum file that we can use.Then as I developed the creatures,  which we are going to be developing, I'll show you how we do it  in the next few weeks.We'll build out this more  and more complicated URDF file,but that's your basic one, and you can  see if we look in there it's a cylinder embedded in the plane  there as we'd expect.If we do p.setRealTime, so we run  the simulation in real-time.Now watch carefully, I'm going  to disappear and zoom that right in.Watch carefully what happens when I start this.Sorry for the sound effect, but you can  see it basically sunk into the ground and that was interesting, wasn't it?Because remember before, when we created  the R2DT robot on the other, the cube, it flew up in the air, didn't it? It didn't just sink into the ground.Have a little think, have a look  at that XML file again, and have a little think why you  think that might be happening.What's missing from my  specification of my 3D model there, if we think about  visual and collision.Okay. Maybe you figured it out.There's no collision tag  there, is there?I'm not specifying that it's possible  for this thing to collide with anythingso basically what happens,  it's just sunk through the floorbecause it can't collide  with anything.How about if I update it,  add a collision tag?Well, what we can do is we just  make a copy of the visual tag and just paste it there,  and I'm just going to create that, rename that to  a collision like that. Okay.Just rename the visual tag  to a collision tag and let's just tidy it up a bit so  it's really clear right.There we go so now we've  a visual tag, which is a cylinder and we've got a geometry, a collision  tag, which is a cylinder as well.Let's try loading that one in as a new robot.We've lost, the old one. It's gone.It's just, it's sunk into the ground.Gravity's pulled it away.I could probably set gravity  to like mine to a hundredand get it to shoot back up  again, but I'm not going to bother. Let's do rob2 and we're  going to load it in again and remember because I've turned off  the file caching it should sit there.Okay. That's more what  we expect, isn't it?Did you see what  happened there?Actually, it did the correct thing,  and actually, I can even pick it up because the simulation's  running in real-time.I'm now picking it up with my mouse  and I can drop it on the floor like that, so it's now properly colliding with  that plane there and there we go.That's my basic one-link URDF file,  and so that's great. I'm happy with that. My next step is that I'm  going to add, I've done that.I've had the collision now  I'm going to go for two links.I could at this point, add an inertial  tag, actually I'm going to do that.Let's go for the inertial tag.  Why not?Because we notice when  it loads, this one in, it does complain about  something to do with inertia.If I put that inertial tag in,  I'll get rid of those error messages, which is always good. Let's go here  and see if we can find the inertia tag because I don't have  to type the whole thing in because I'll probably  do it wrong.Okay. Here's our inertial tag and I'm  going to go back to my 101 file, which is this simple file  with just this stuff in and it's again, inside the link tag  and the inertial tag is, as I say, it's generating these error messages.It allows me to specify the inertial  properties of this link so each link in the robot can have  different inertial properties.You can have heavy ones and light ones,  so you can get really complicated model.Okay. This one I've set  the mass to something, otherwise it defaults to one  or something like that.Then this stuff, all these numbers,  I got those from the manual.I have to be honest. I'm not  totally sure what they all mean,but I think it's to do with the way that it expresses  its inertial property so you can basically see I'm setting  inertia on the X, Y, and Z access to all being the same thing, which  makes sense because we want it to move in a similar way in all axis  and then there's a receptor zerowhich is what it says  to do in the manual.We don't need to worry too much  about t hat because it works for now.Okay. That's my updated 101. Let's make ourselves a robot number three.Let's see if we've got rid  of the error message. Oh wow. Okay. Did you see  the code over there?I've got rid of my dreaded  error messages over here now.You see, when I ran the code it   didn't produce any error messages and I've got a happy thing.  It's probably a bit lighter than the other one because I think  it defaults to one and there it is.That's another robot in my space now.What's next, I've  added my inertial tag.Next up. I can try having two joints, two links, and a joint between them.Remember we can have as many  links which are robot parts as we want and we can join them  together with joints.Here, we have to specify joints  so let's go back into our 101 file.I'm now going to make  a complete copy of this link, and so that I've got two,  but I have to give it a different name.I'm going to call that base_linkand we'll create another one  call it maybe sub_link. Okay, we call it sub_link.It's got all the same properties. Actually, let's make it really obvious that it's different by  making it into a kind of weird longcylinder that's very thin.A thinner cylinder so we can see  that difference in the shape.Okay. That's my sub_linkand then I need to because  I've got two links nowI need to have a joint  to join them together.If you look here, you can see  I've got this kind of joint tags.I'm going to pull that out  of the XML and copy paste it.I've got this one here,  and there's the joint tag.That's the minimum joint tag  and we can try with that one and see if it complains.There's a minimal joint tag and I'm  setting the type to fixed at the moment.We'll talk more about that later so let's  call it base to sub and it's called.Remember the first-- I need  to know the names of my links.I specify so base_link is the first one  and sub_link is the second one.The parent is going to be base_link  and the child is going to be sub_link.Let's try loading that one and rob4--let's make sure we can  see it before it disappears off.Okay. There we go. We can see  we've got another robot now.Let's see if we can get  a bit of view on that one.You can see it's got the-- You see  the extra cylinder has appeared there.You can see it's got--  I didn't get out the way.You can see it's got  the cylinder, is there.It's got the little cylinder in the middle so I specified a thinner cylinder of the second link, but it seems  to just sort of overlaid, it's just sitting on top of  where the other one was and so that's where I need  my extra link properties.If you look here, I've specified  the extra link properties, which isgoing back to a diagram from earlier.If I've got a link like that,  whoop let's do it with a normal pen.The idea is I've got two links  and they're in 3D and I need to specify  the distance between them and then the 3D, the angles  to which direction they point in and that's what this code here does.  I need to do access X, Y, Z.Let's just type that in.We're going to do, and that's  all inside the joint tag so it'saccess X, Y, Z equal  and it's going to be 1, 0, 0.Let's try that, 1, 0, 0 okay, and then end that tag because  we have to end our tags because it's XML not one of these easy-going HTML5,  we have to end our tags, right?Then we've got a limit effort.We're going to go limit with effort,  lower, upper and velocity, so we're going to put  a limit tag in. Limitwith effort,upper,lower, and velocity. This is specifyingreally the behavior of the joint  and how it works as if it's a motor.Let's just put the numbers in,  so 10, 0, 10, 1, so 10, 0, 10, 1.This is to do with how  the motor works in this joint, so this is where we get  into the robotic stuff.The effort, I believe, is the maximum  effort that you can apply to this motor, so how powerful is the motor.The upper and lower  are the range of effort, so basically you can set the motor  at different speeds effectively and the velocity I believe,  is the range of speed.Effort is the amount  of force we can apply, velocity is probably the maximum  speed it can go to, the upper and lower are  the range of the effort, I think.[chuckles] The documentation  is a little bit tricky but I encourage you to go and read it  and my get out of jail free card here is, basically because we're doing evolution  and we're evolving these robots, in a way we don't really need to know  exactly how all these numbers work as long as  it accepts our URDF files.The evolution will solve the problem  of coming up with the right numbers.Next one, we're going to put an origin,  this is the important one, this is the one that dictates how  it is in relation to the other part.The axis is, the direction and the origin  I believe, is how far away it is.Origin RPY and XYZ, so origin RPY and XYZ and let's end that tag  and it's going to be 0, 0, 0.That's the rotation from the-- this is the rotation,  R rotation PY, so how much-- what angle it's rotated  at from the parent, so this is going to just say,  \"no rotation.\"Then 0.5, 0, 0, so 0, 0.5, 0, so that's the--  so I guess that's the Y, so that means it 's going to be  slightly white and interestingly, XYZ are in a different order again  than they were in set gravity but that's just the  way it is, sorry folks.That's the problem when you  mash together different frameworks and different libraries,  especially when it's 3D stuff.They have different ways of specifying  what the order of the things are.Anyway, let's stick this one in the space  and see what it looks like, so I put that over there,  so this is going to be rob5.Oh, there it is.Oh wow, where did it go? Let's go and get it.There it is, that's my new robot.  You can see, if I get out of the way,  you see I've got two robots now.I've got the first version, which is  when I didn't specify the extra dataon the linked, the joint tag and then this is the one  where I did specify the extra data.You see it's moved across slightly  from the parent because of that origin tagwhich moves it across, so you can  specify where the other link is, in relation to the base_link,  so that's there.What's next? That's  more or less it [laughs] actually.I'm going to just give  the summary now.What we've been doing there  is we've just been exploring.I encourage you to explore this.The reason I do it in this  slightly clumsy way is, I think it's really--  it just shows you the practice.This is how I do it, I will work through  and I'll just play around with it, and go, \"What happens if I add a joint  there? What does that number do?\"And adjust that number  and see how it looks different.What's really nice about this  PyBullet environment is, you can do that you can iterate on the file  and reload it and create a new-- you're not with these  weird robots lying around, so it's a fun way  to experiment and explore.Please go ahead  and do this yourself.What we've been doing is we've  been handcrafting a URDF file.We started out by with one link,  and then we had two links, and we added inertia properties  and collision boxes and then looked at the interaction  between the joints and how you can place them between the links and how  you can use a joint to place them apart.In this video we've been playing  around with hand making a URDF file and exploring the different  parameters there and what they do.I'm hoping that you're going to go off  and do some exploration yourselves and have fun and perhaps post  some of the results in the forum for  others to look at."
}