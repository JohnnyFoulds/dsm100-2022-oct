{
  "course": "DSM100-2022-OCT",
  "topic": "Topics 5&6: Creatures",
  "title": "Lecture: Introduction to pybullet",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96245&forceview=1",
  "transcript": "[music]In this video, I'm going to give you an introduction to Pybulletand show you how to install it.To summarize, we're first of all going to answerthe question, \"What is Bullet?\"Then we're going to see some Bullet demosjust to see what it's capable of.Then we're going to install Pybulletor look at Pybullet and install it,and then verify, I'll show you how to verify that it's working.By the end of this video should havePybullet up and running, if you follow it along.First of all, what is Bullet?Well, it's a rigid and soft-body physics engineoriginally created by Erwin Coumans,and it's a really powerful tool.I'll just say that when I was evaluatinghow to best deliver the materials on this course,how to design it,which framework to use,and things like that, clearly, Bullet came outas being a very strong contender.I'll show you whywhen we look at the demos in the next slide,so demo time.Let's go over to my browser here.Now, it's worth saying Bulletis written in C++ and C,but that,in ammo.js,is a transpolation of thatinto JavaScript, so its a direct translation of the codeinto JavaScript,an automatic one,and therefore, it behaves very similarly,pretty much the same, as Bullet,but the difference is,I can run it in my web browser, so it's really easy for meto show you some demos.Let's jump in and look at those.This is the same as if you'd builtthe same thing using Bullet itself.That's the starter demo,just a calibration type of demo.You can see a bunch of cubes fell downfrom the sky,and that's kind of fun.Now,let's look at another demo.This one I really likebecause it shows the soft body dynamics.A soft body is when something can deform.You can see that that sheet over there--so when I swing the stickbackwards and forwards or the thing back,you can see the sheet is flopping around,it's deforming the shape.That's what we mean by soft-body physics.Now, the wall, on the other hand,is not soft,it's actually made from bricks.Oh, you can see, but I can knock them offif I swing my sheet around in just the right way.That's a really good demo of the soft body capabilities of it.This is a bit more satisfyingin terms of knocking things over.Here, I've got a soft body rope,but I've got a hard bodyor a rigid bodysphere on the end,so it's much easier for me to smash that wall down.Now, moving on, I just wanted to show you one more.Now, this one is a soft body demonstrationwhere you actually have very deformable bodies,so I can throw cannonballs at them,and you can seethat they deform in a very satisfyingand realistic way.That's all running in real time in my browser,which is pretty impressive when I throw a loadof bricks at it there.That's just a quick demoof some of the capabilities of Bullet.You can see it's a really powerful physics engine,and it's also being portedto various different environmentsas you just saw, so it can run in the web browser,it can run as a C++ Library,and now there are Python bindings for it.I'm not sure when they did these, but the citation is 2016,so it's fairly recentthat they've added the bindings. I think the original version is 2006,or something.Yes, so let's just read this now.According to the authors.\"It is highly recommended to use PybulletPython bindings for improved supportfor robotics, reinforcement learning, and VR.\"What they've done with the Python version of Bullet isthey've added some extra featuresreally to allow it to more effectivelyhelp researchers to workwith robotics and VR.That's kind of what we're doing, we're going to be evolving some weird,robotic creatures.As I say, when I was evaluating different physics engines,Pybullet clearly had the capabilities.The fact that there's a communityof people into robotics who are using it,I thought it'd be really useful for people to learn about it as well,so I wanted to expose that a bit.That's various motivations for me using it.Let's get into the nitty-gritty,let's see how we actually go aboutinstalling Pybulletand getting it up and running.Now,before I get into my terminaland start typing things in, I just want to saythat if you're new to Python,I'm going to provide a little bit of reading material for youto help you get up and running, but if you just followalong with my commands, and you've got a nice Linux installed,you should be fine,but these commands should also work on a Mac.If you've installed Python with Homebrew on a Mac,for example, this should work just fine.If you're on Windows, you can use Anacondaor Conda, or even use Windows Subsystem for Linux,they should all allow youto run these commands.It should be fine.Now what I'm going to do isI'm going to install a virtual environment,which is a local install of Python,a little miniature install,which allows me to install packages without having to be the administrator.Typically, to install Python packages globally,you have to be an administrator and it's a bit of a pain,and it changes everything on the system,but with virtual env,you can just have a local setupjust for one particular task,and that's exactly what we're doing.How do we set up a virtual environment?We run Python 3, importantly, Python 3,and we type \"-m venv\" like that.Let me pull this down a little bit.We do python3, module venv.It's going to run this module.I need to specify where I'm going to create my virtual environment.I create all my virtual environmentsin a Python folder in my home directory,so that tilde sign you see before Python there,it says home directory, Pybullet.You can put any path there, C/ whatever,temp, whatever you want to put it,or whatever is appropriate on a Mac,or you can use the tilde to default to your home directory.That's where it's going to create the environment,it runs. Now, it's created the environment.Now, I need to activate that Python virtual environment,so I do source,and I put in the pathto the environment, which is Python Pybullet,then I put bin/activate,like that.Let me just try and widen this out a little bitso you can seethe whole-- There we go.Now you can see the whole command.It's sourcebin/python/bin/activate.I'm now in my Python virtual environment.The next step is to use pip,which is the package manager for Pythonto install a bunch of packages,so I'm going to install Pybullet,I'm going to install IPython,which is my preferredinteractive interpreter for Python,and I'm going to install NumPybecause we might need that later.Oops, I forgot to say install,pip install.Then because I've installed this before,it uses the cached version, so it doesn't have to download them,so it's rather quick.It's just installing it, so they're all installed now.Basically, at this point, basically,I've set up a virtual environment.I've got a little miniature Python installinto which I can control exactlywhich packages are in there.I've now installed the packages I want,which is Pybullet, IPython, and NumPy.The next step is to see if IPython is working correctly.I'm going to just fire up my IPython interpreter like that,and I do import Pybullet as p.It means that I'm going to have a variable called p,which represents the Pybullet library.You'll notice that it prints out a little messagesaying when it was built, so it gives you an ideaof which version you're usingbecause and usually,I noticed that Pybullet doesn't have a version flag,which you would normally findin a Python library, but that's okay,we don't need that, because it just tells us what the date is.The next step isto actually run it.To run it, let me just clear that off,I do p.connect,and that allows me to connectto a simulation environment.I need to say what type of environment I have.There's a few different ones, there's network ones and things like that.I wasn't able to get the network ones working,but there's also an offline one.This P.GUI one will fire up in a user interface,and basically,allow me to run simulations in real time,but later, we're going to be running simulations in non-real time,because we're going to have to basically evolve these creatures,and it's going to involverunning lots of simulations in parallel,and eventually, we will implement that.For now, we're just going to use the GUI one,so let me run that.You should see something like thiswhen you run that command.That means you've got Pybullet all installed,and it's up and running, and it's great.We're done here,we've installed it, and it works.Just to play around with that a little bit.You can see I can scroll up and downon my mouse wheel and it zooms in and out,and I can hold down Ctrl,and then I can move the camera angle,so I can zoom in and outand I can move around.That's just giving you a couple of ideas.By just saying p.connect,I can get this whole environment up and running.In a later video, we're going to see how we can put things into the environment.In summary,we've just had a bit of an intro and the setup instructions for Pybullet.I showed you what Pybullet was.I showed you some demosof what the underlying Bullet physics engine can actually dowith soft bodies, rigid body dynamics.Then we ran through the commands to install itand check that it's working.In this video, we've just been getting up and runningwith Pybullet."
}