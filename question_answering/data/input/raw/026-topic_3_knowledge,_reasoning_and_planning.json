{
  "course": "DSM100-2022-OCT",
  "topic": "Topic 3: Knowledge, reasoning and planning",
  "title": "Lecture 2: Knowledge representation and knowledge base",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96163&forceview=1",
  "transcript": "[MUSIC]We have already seen that knowledge is essentialfor intelligent behavior of artificial agents.In this mini-lecture,we will talk about how to represent and encode knowledgein a machine-processable wayso that a knowledge-based agentcan access, process, and update its knowledge base.Knowledge can be represented and encoded in many ways.For example, it can be encoded directly in Java or Pythonbut it is not how it is usually done.Usually, it is done with the use of knowledge representation languages.One of the main reasons for thatis that the power of knowledgecomes from reasoning a logical inference.To enable logical inference over knowledge,that knowledge has to be encoded in logic.Conventional programming languages are not designed for that.However, the situation is changing and there are ways around.Logics can be different.Description logic,propositional logic,first-order logic,higher-order logic,monotonic, non-monotonic,temporal, modal, and so on.Different logics feature in the different balancebetween expressive power and reasoning complexity.In this topic, we will briefly look at two logics.First-order logic or FOLis one of the most expressive logicsand description logic or DL.DL is popular because, in contrast to FOL,the core reasoning problems for DLs are usually decidable.This means that an inference engineusually can come to a conclusion,while for programs in FOL, it is not always the case.We also will look at knowledge representation languagesthat are popular for encoding statements in those logics,Prolog and RDF,or Resource Description Framework.There is no expectation in this modulefor you to become proficient in RDF or prolog programming.The expectation is for you to be familiarwith RDF and prolog capabilitiesand understandhow they can be used to encode knowledge in logic.We will start from considering an example.Let us model some knowledge about our program.Master in Data Science is a postgraduate programrun by the University of Londonin partnership with Goldsmiths' academic provision.It includes such modules as machine learning, neural networks,artificial intelligence, et cetera.Students enrolled to any of the modulescan raise academic queries with their tutorsand all other queries with Student Relationship Managers.First, we will extract entitiesand then we will model relations between those entities.Entities,physical things that exist in the world.Mentioned in the description are a postgraduate program,MSc in Data Science program, the University of London,Goldsmiths,students,tutors,Students Relationship Managers, and so on.These entities are linked by different relations.For example, a student enrolled to a module,a student raises a query,and we see data science program includes modules.We can link the academic query and tutorby the link handles,and non-academic query, we link to the Student Relation Manager.We will represent this knowledge in the form of a knowledge modelor a knowledge graph shown on this slide.Such a knowledge model can be encoded in different languagesso that a knowledge-based agentcan understand and use this knowledge.First, we will look at how it can be encoded in RDF,Resource Description Framework.RDF provides a model for describing resources.RDF defines a resource as any objectthat is uniquely identifiable by a URI,Uniform Resource Identifier.Other objects that we identified in the considered examplelike a student, a module, we can represent as a resource.Resources have properties that link resources to other resources.In our examples,relations between entities,or they can link resources to some values,like text strings or numbers.Such properties are called data properties.RDF essentially encodes knowledge in the form of triplets,resource X, property Y, resource Z,or student, raises, query.The logic behind RDF is description logic.This means that prisoners can easily process models in RDFand in FOL conclusions.As you will see from the examples,we will mainly describe things not much reason-based.More precisely, we will be considering the RDFS,Resource Description Framework Schema.There're different RDFS formats that have different purposes.The Turtle format is a syntax that is easy to read for humansand that is what we will be using.Classes in RDF notation, RDF class,are used to classify resources.An instance of an RDF class is defined using the predicate rdf: type.For example, we can define that module is a classand that machine learning is a subclass of the module class.Total offers the abbreviation of rdf: typein the form of the letter A,which makes the syntax short and easy to read.In this notation, we use ex or example,as an abbreviation for the IRI prefix.As I explained, each resource must have Unique Resource Identifier.We will use this namespace for our example.This is not a real URIbut I could register it for useor I could use my university URI for this example.Rdfs: Property is used to add relations or attributes to classes.Now we can encode student, raises, query,as it is shown on the slide.In practice, you don't need to write such statements manually.They can be automatically generated from a knowledge model.The attractive features of knowledge modelsis that they can be extendedand integrated with other knowledge models.From our example, you can see the major difference betweenRDF and programming languagesis if something is defined in RDF,it is defined globally and uniquely.Therefore,if there are other knowledge models that define such resources as a person,and there are,then those resources can be explicitly linked,or imported to your knowledge model.For example,Person is already defined by FOAF or Friend of a Friend resource.We could simply use their class instead of defining ours.Integration is achieved via linking entitiesdefined in different knowledge models.For example, we can integrate our knowledge modelwith an event modelby adding a link located in between Goldsmiths and London.We then can combine the knowledgeabout the MSc Data Science program and events in London.We can imagine developing an agent,advising students about relevant and interesting events.We can easily extend our initial knowledge model.For example,we can add the entity module leaderand link it to Goldsmiths by the link hired by,and to academic query by the link handles.This will reflect our current knowledgethat tutors can raise academic queries with the module leader.Capturing existing the main knowledge is usefuleven for understanding of the domain.The example explains the divisionin handling academic and non-academic queriessince Goldsmiths is responsible for academic modelsand the University of London for all others.We can think about several scenarioshow such a knowledge model can be used.For example,we can design an agent for classifying queriesto academic and non-academic,and advising whom to contact and how,and monitoring the progress of the query,or we can have an agent for an internal useto better direct your queries internallyto assess if you raised it correctly and redirect it if necessaryto speed up the process.We also can analyze what sort of queries were raised incorrectly,and learn from that to improve the overall process of communication.In this mini-lecture,we can see that knowledge-based agents and their co-componentare knowledge base,and how it can be representedas a knowledge graph and encoded in RDF."
}