{
  "course": "DSM100-2022-OCT",
  "topic": "Topics 5&6: Creatures",
  "title": "Lecture: Interpret the genome spec",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96290&forceview=1",
  "transcript": "[music]-In this video, we're going to start building outour genome to URDF code.In summary, we're going to be looking at the genome spec part one,so we're looking at parental and recursion parameterswhich are the hard ones, really.Well, the parent one is.Then we're going to be looking at how we can then pull in the extra linkand joint properties.The first stepis to think about getting a genome dictionary.What we want is a dictionary that describes the genomebecause at the moment,remember, the genome is in the form of a big list of random numbers.That's not very easy to work with,and when we start reading our code and this is dealingwith hard-coded indices in that, it's not going to work.What we've done is,we've already created this genome spec thing.If I jump over here, I can remind you of that.Where are we?Genome.In the genome file,we've got this genome_spec thing.The genome_spec,it basically tells us, for each index in a gene,in a genome,what's the name of that parameter that it's encodingand what's the range of it.The idea is that this will make our code easier to read later onby having this spec.It also makes it easier to tweak it.Let's say I suddenly decide, \"Oh, I don't like that link recursion.I want to have more, a higher level of available recursion.\"I can just go in and edit that number thereand that will scale up and every creature I createfrom that point on will have a higher recursion level,or if I want to change the rangeof the length or whatever, it's super easy.It's very easy to read and you can interpret it.That's the reason for using this.It does make this interpreting the genome a little bit more complicated.What we're going to do is I'm going to just show you in here briefly.I've got this genomethat's got random numbers in like these.What I would like to have is a genome dictionarywhich is something like link-recursion.That will be whatever,a sensible number for that, right?3.4 or whatever.Anyway, it has to be a whole number, doesn't it?Then, with the others as well, so with the other parameters.That's what I want.I want to get from that to, then,my nice lookup dictionary for my genomes.How are we going to do that?Well, what we're going to do iswe're going to write a function called genometo genome dict, and then we're going to do that.Let's write a test first.The test is going to be calleddef testGeneToGeneDictand we're going to start at the gene level, right?Remember, a genome is made up of multiple genes.The inner function hereis the one that takes a single gene and the gene_specand uses them to convert into this nice scaled genome dictionary.How am I going to do that?First of all, I'm going to take my specequals genome.Genome.get_genome_spec,and gene equals genome.Genome.get_random_gene.The length of the gene is going to be the length of the specbecause the gene should have the same numberof numbers in it as there are keys in the spec.Then what I want to do is say,gene_dict equals genome.Genome.It'll be gene_get_gene_dict.I'm going to parse it to the gene and I'm going to parse it to the spec.Then I'm going to do self.assert and that is in.[silence]Okay, yes, self.assert.I want to make sure, with this,--Sorry, it took me a little while to find that one.-I want to assert that in my gene_dict that I have a key, maybe somebody's key.Just verify, maybe, that link-recursion is there.I can just check, have you got a key, a sensible key, in there.That's just a quick way of verifying that the whole process is workingwith a simple test.I can run that,and we'll find that, of course,object genome has no attribute get_gene_dict.Okay, because that's what we're supposed to be writing.Let's go ahead and do that.We need to add a function called get_gene_dict to this.I'll put it up here.Maybe up here is good.It's going to be a static function againbecause it isn't stateful in the sense of requiring a built-up genome object.Get_gene_dict,and it's going to take as its input a gene, and a spec.What it's going to do is going to go for key.Let's, first of all, create a value called gdict equals that.Create an empty dictionary for gdict and for key in get,-Whoops, sorry, -key in spec.The index is going to be spec key index.That's which elementin the gene array I'm going to be using,and the scale is spec key scale.Just to remind you, you've got the scale value there,and then we assigned inds to each one as well.That will allow me to find the appropriate item from the gene.Gdict[key]equals gene[ind] times scale.There's return gdict like that.That's what I wanted to do.I wanted to, basically,use that spec to make a more usable data structurefor my gene processing.Type error in the string requires string as left operand, not dict.Whoops, that's interesting.Assert is in gene_dict.That's interesting.Keys.Let's try that.In assertIn, if member not in container, TypeError in <string>requires string as left operand, not dict_keys.Oh, okay, sorry, sorry.The first thing I need to parse is the thing I'm looking for,and then I parse the thing I'm looking for in.I don't need keys.Okay, good,it's passing that test now, so yes, yes.Just to explain, the assertIn function, the first argument,is the that thing you're looking for,and the second argument is the thing that you're looking for it in.You're going to say, \"Is this in this?\"It makes sense for them to be the first and second.Okay, that's fine.I've successfully created my gene dictionary by the looks of it.I could do some more tests to verifythat those things are being scaled properlybut I'm pretty sure they are, but yes,you might want to be, for completeness,you might want to do that yourself.The next step is to do the genome dictionary.Next, I would, basically, just write a function called static.No, we write a test first, don't we?Naughty me.Def testGenomeToDict.This is basically doing the same thing but it's going to operateover the whole genome.Spec equals--Let's just copy all of this like that.Spec is get the specand then the genome_dicts-Because, actually, it's going to be a list of dictionariesbecause each dictionary is going to be for each gene,so it's going to have a list of them.-equals genome.Genome.get_genome_dict,and I needed to parse it.Let's make a random genome.genome.Genome.get_random_genome.It's is going to be length of spec for the--Getrandomgenome requires the lengthof the gene and the number of genes and one gene count.Whoops, sorry.The gene count.That is, the length of the genie is, length of spec again,and the gene count so let's do three for the sake of it,and we can verify that we get three back out.Gene_dicts, your genome, get_genome_dict, and I'm going to parse it.It's plural because it's going to give us a list of them.I'm going to pass it as spec and I'm going to pass it to dna.Oh, it's the other way around on that one.I'll do it the other way around.Let do it, let's be consistent.Dna and then spec.I need to now run that, see that it fails.Okay, genome does not have get_genome_dict.That's fine, I can write it.Def @staticmethod,defget_genome_dicts,and it receives the genome and the spec.For gene in genome,gdicts equals a listand gdicts.append Genome.get_gene_dict on geneand spec.That is that.Just calling my other functionthat I just wrote and I shall return gdicts.Just to complete that test,I would assert that the length of the dictionary,the list that I get back is, in fact, what I want.I'm going to do self assert equal lengthof genome_dicts is three,and then I should be good to go.Let's press play.Okay, all tests running.Excellent.Good progress.What do we do next?We've done our get_genome_dicts, we've done that bit.The next thing is to do the interpretation,the developmental process.Just to remind you, the developmental process,the concept here is that we place one linkin this imaginary world and then as we place subsequent links,it then uses one of its parameters on the genometo decide which other link it's going to connect to.Only ever connects to one.If your link is placed in the space right at the end,it has loads of options.It's a developmental thingand that gives us more flexibility in the evolution as well.How are we going to do this?Well, what we're going to do is,basically, have a function which is going to takea genome and turn it into a list of links.Do def testGetLinksand let's do it again so this time we do this.That's my first few steps.I've got my dictionary of genes, my list of gene dictionaries,and then I can then turn those into links.Links equals genome.Genome,getLinks.Maybe it can be more explicit.Genome_to_links.I'm just going to simply parse in my genome_dict,because I don't need the other stuff anymore.That's it. Oops.Thats dicts plural.Then I'm just going to assertself.assertequal.The length of links is going to be three.I should have three linksbecause even though we've got the recursion and all that,we're not doing the expansion yet.What we're doing here is just generating the flat linksarray if you remember back to that video.We create the flat links array, which we're going to then parseinto the expander to expand out using the recurrence.For now, we just want to get flat links with all the correct properties.Let's go for that.That test should fail.We run that and the test fails.Genome has no attribute genome_to_links so we need to define that function.It's another one.Staticmethod, def genome_to_links,and it takesthe genome dictionaries.I could put a comment in to make that clearer but that's fine.What I need to do is,to do the developmental process,I'm going to have to have an array of parentsso I remember all the parents that I've placed on there,and I have to give them names so I know who I'm going to connect to.When I then create my links, I have the appropriate names available.How am I going to do that?Let's have a list of parent names.We're going to start it off with--I'm going to have a parent index,which will allow me to generate the names.Let's just start off with the first name, which is going to be parent indexconverted into a string, basically.That'd be the first link that I'm going to create.The first link is going to be--I will have an array of links.Sorry, links equal that.Then I'm going to go through and I'm going to addall of my links in there.Let me get that out of the way.For gdict in genome dicts.For all of the genome dictionaries,I'm going to pull out each gene in turnand that's going to be converted into a link.First of all, I need to know what the properties areso the parent_index--Oops, sorry.I'm going to call that link_ind, actually.That is link_ind.Now, link_name is going to be,basically, the string version of link_ind.That's okay.Then I'm going to add one to link_ind every time.So ind plus one.Now, remember how we create these links.We need a name, we need a parent name, and we need a recursion value.We've got the link name there.What about the parent name?The parent_indexis going to be pulled out of the genome dictionary, right?Gdict.If we go and look at the spec we can find out what the name of it is.The spec is joint-parent.Joint-parent, and it's scaled in the range zero to one so that's fine.We're just going to fix it up for ourselves.The parent index is this property scaledby the length of the current available parent names.That means that the index, as we build out this thing,we'll get more and more parent names, and we'll be able to index into that,but the beginning, it starts off parent name.The parent name is going to be oneso it's guaranteed to link to the parent that's called zero,which is the first parent.That's great.We're going to link to that one.Then what we do is we now need it to go,the recurrence is gdict.Let's find the value for that.That is called link-recurrence.That's that property, link-recurrence.That's fine.Now I can create my link.Link equals URDFLink,and the name is going to be link_name.The parent_name is going to be parent.Oh, I haven't got the parent name yet.Oops.Parent_name equals parent_names intcast of parent_ind.It's basically going to use that index, which is a scaled versionof the parameter to indexinto the parent names and select me a parent name.I've got my parent name.Great.Then recur is going to be that other propertyI just pulled out of the genome.That's easy.That's created my link,and I add my link to the end of the links.Links.append(link).Then finally,what I need to do is add the name of this link to the parent names, right?Parent_names.append link name,because now it becomes one of the available parent names.Finally, I return the links.I think that is it.Let's try to test that one.I'm passing that test. Great.I'm pretty happy with that.I'm now passing my test where I can generate a set of links.What we do next is we go back to the slides.The next thing is to get all the other propertiesand put them into the link.I need to update the URDFLinkclass so that it can take some more properties inand I'm going to parse those in from the genome_dict.I'm not going to do the whole thingfor you because this video would be too longand boring otherwise.I'm just going to show you how I'm going to add one propertyfrom the genome into the URDFLink objectand I'll then post you the code with the complete set so you can see that.Let's just add one, for the sake of brevity,because it's basically repetitive.What I need to do is, first off,I'm going to add extra properties to this, which is my URDFLink class.If we look at the spec, let's take one example.Let's start with link-shape.That's a little bit of a tricky one, actually,because that's a non-numerical one.Let's do link-length first.How do I add a link length?I'm going to just say,okay, you're going to have a link length, and I'll make it an underscore,and I'll give it a default value.I'll give it a default value because that means that the other codethat's dependent on thishaving only three inputs is not going to break.Let's drop that onto a new line so it's a bit neater.I've added an extra property to that.Now, when I create the link here, I can add that property.I could actually make this a bit easier to read as well.We're going to parse all the properties in a line like that.Then the next one is link_length, and that's going to be, basically, this.I can just pull it straight out the dictionary.I do link-length like that and then that's it.That should work just fine.Let's just go back here.No crashing.Good, so that's basically it for now.What I've done thereis I've shown you how I've done the developments processwhere we get this gradually growing list of parent namesand we index into that list with each subsequent link that we create.Then I've shown you how to add the other properties,so the recursion,and we added an extra one, link_length.What I'm going to do nowwhile you are getting onto the next videois I'm going to complete the rest of those properties and fill them in.Then we'll come back in the next video and look at the XML.Jumping back to the summary.What I've been doing is we've been working on converting our low-level,raw dna data, the floating-point values,into proper properties of a URDFLink objectso that we ready to later then convert that into XML.This is what we've been doing.In this video,we've just been building out our genome parsing code."
}