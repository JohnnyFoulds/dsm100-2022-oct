{
  "course": "DSM100-2022-OCT",
  "topic": "Topics 5&6: Creatures",
  "title": "Lecture: Tweak the GA",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96331&forceview=1",
  "transcript": "[music]In this video, we're going to makea couple of quick tweaks to the GA to make it perform better.First of all, we're going to implement elitism,then we're going to improve a better distant moved metricIn other words, a better fitness function.Elitism means keeping the fittest or fittests.That means that basically, we take one or moreof the fittest individuals from each generation.and we store them unchanged into the next generation.How are we going to do that?Let's go into the code and do it.At this point, this is the algorithm.We've done our evaluation here.At this point, we know which one is going to be the fittest.What we're going to do is we're going to storethat one for later.We'll have a variable called elite and we're going to storethe fittest into the one called elite.We know what the fittest is.fmax = mp.max(fits)That tells us the fitness of the fittest one.We just have to locate it.for cr in pop.creaturesif tr.get_ distance_ traveled() == fmax,then elite = cr,and then we can break because we found it.That just stores the fittest one for later.Then what we can do at the end down here is simply say--well, before we add it into the creatures, we can just delete one.We get a new_gen(0). Bad luck number zero.You're being replaced with the elite one. That's elitism.Let's just run that and see what it doesObviously, it's not necessarily comparable because it's a different ran,but you can see the numbers may be more favorablethan the previous run.Like I say, each ran's different, because you're starting outwith a different ran and population.I would say definitely, it looks betterbecause it's keeping that highly fit one for the next generationinstead of making a weird mangled version of it.That's elitism and that's standard thing in GAs.The other tweak I wanted to make is a better distance.We could do this, right?One thing, if we notice the creatures,let me just run up my motor test script here.Oops, sorry.If we go into here, and go python motor_test.Let's have a look.You can see that some of these creatures, they move around,but they go around in circles.They've got some good movement going, but they don't really goin a straight line.What I'm going to do is make a fitness function,which means that we just measure how far they move in total.Rather than saying how far did they move maybe from the origin?We're going to say, during the whole simulation,how far were they able to get?How much distance did they cover?We can just make a little tweak on the creature to do this,and we'll see maybe that's going to be a friendlier fitness functionso they don't have to travel in a straight lineto get the maximum fitness, if you like.It's all going to be in here.What I'm going to do is, start out with self.dist = 0.I'm going to do that here as well, because when we reset it,it should be reset as well, just in case.Reset the distance.The distance is going to be zero.What I'm going to do is then every time we update the distance,I'm going to say, here.Basically, once we've moved a little bit.I need to work out the difference between where we were beforeand where we are now.If self.last_ position != None,that means we do have a last position so we can work out our distance.We can just pinch this thing here,and say, basically-- Oops.Position one is my last_position.Actually, position two is going to be the new position,so the new incoming position.I'm just going to say, that's the distance that you can leavedistance between the two.I do self.dist = self.dist + the new distance.It's really just saying how far have I movedsince the last time my position was updated,and I just add that to this total distance.I'm going to calculate my total distance over time.Then what I can do here, instead of doing all this stuff,is I can just say return self.distbecause it already knows how far it's traveled.It doesn't need to compute it at that point.Let's run that and see what difference it makes.Hopefully, it won't make the difference that it crashes.You can see, I've got greater distances.Oh, it did crash.Whoops.I think that's a different bug, but which I will solve for you later.Anyway, you can seeI'm getting much higher distancesbecause I'm now calculating the whole distance.It moves around in a circle really fast.It gets a nice long distance.You can see I'm getting much longer distances.It seems like it's going to be getting a bit more capabilityto improve its fitness over time.I prefer that fitness function.Like I say, you can spend the rest of your lifetweaking these things, but I think that isa better fitness function to look for interesting types of movementin these creatures.That's enough. Back over to the summary.In this video, we've done elitismWe've implemented elitism, which allows us to storethe fittest individual every generation, and we've improved the distance metric.In this video, we've just be makinga couple of tweaks to the genetic algorithm"
}