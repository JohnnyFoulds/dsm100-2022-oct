{
  "course": "DSM100-2022-OCT",
  "topic": "Topic 2: Problem solving agents",
  "title": "Lecture 4: Genetic algorithms",
  "url": "https://learn.london.ac.uk/mod/page/view.php?id=96134&forceview=1",
  "transcript": "[MUSIC]In the previous mini-lectures,we can see how an intelligent agentcan find a solutionin a non-observable and deterministic environment.Now, we will look at what happened in more complex environments.In this mini-lecture, we will look at the local search.The search of algorithms that we have seen farare designed to explore the search space systematically.The past to goNconstituted a solution to a problem.In many situations, however, the pass to the go is irrelevant.The flow is clean, the puzzles are solved,an object is assembledand it doesn't matter how.We can consider a different class of algorithms,a local search.Local search algorithms operate using a single current node[?] and multiple node pathsand generally move only to neighbors of that node.Typically, the path forward by the search are not retained.Local search algorithms are not systematicbut they have key advantages.They use very little memory, usually, a constant amountand they can often find reasonable solutionsin large or infinity continuous states basisfor which more systematic algorithms are unsuitable.Local search algorithms are useful for finding optimal solutionsfor optimization problems.One of the best-known local search algorithmsis a genetic algorithm.It is inspired by Charles Darwin's theory of natural evolution.This algorithm reflects the process of natural selection,where the fittest individuals are selected for further reproduction.The offspring inherit characteristics of their parents.Individuals in the new generation are assessed,the fittest are selected for further reproduction,and so on until the process convergesif there are no improvements in fitness over the next generation.The idea is that natural selection will find a solution for the problemand often it does, but not obvious.A genetic algorithm will increase the population of chromosomes,a set of potential solutions for the problem.For example, A1, A2, A3, and A4as it is shown on this slide.A chromosome is represented as a sequence with digits,usually zeros and ones.Each digit represents a gene.A genetic algorithm includes three evolutionary processes,selection, gene crossover, and mutation.Consequently, there are five components to a genetic algorithm.Initial population and we just have seen an exampleof the initial population on the previous slide.The fitness function,selection, crossover, and mutation.The best-fitting individual in the initial populationare selected for the production.Some individuals can be selected several timesand some are non.To produce offspring, genes are exchanged.Across [?] can be selected randomly.On this slide, the first offspring has first three digitsor genes from the second parentand the last three digits from the first parent.Newly produced individuals can be added to the total population.Individuals with low fitness can be excluded from the population.In addition to crossover or gene exchange,genetic algorithms also include mutation.Cross overs correspond to the most significant changes in populationand mutation corresponds to minor changes.Those mechanismscontribute to maintaining diversity in the populationand ultimately finding a solution.In this mini-lecture, we looked at how genetic algorithms work.Genetic algorithms are greatfor finding optimal or good enough solutionsin complex situationswhere most standard approaches may struggle.Later in this module, we will consider a case studythat employs a genetic algorithm,and you will have an opportunity to look inside closer.If you're interested in this topic,I recommend you to check additional literature."
}